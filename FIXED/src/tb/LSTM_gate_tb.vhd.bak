library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.mytypes.all;

entity LSTM_gate_tb is
end entity;

architecture test of LSTM_gate_tb is

component LSTM_gate is
	port
	(
		clock			: in  std_logic;
		reset			: in  std_logic;
		start			: in  std_logic;
		input			: in  signed (15 downto 0);
		ht_in			: in  signed (15 downto 0);
		wx_in			: in  signed (15 downto 0);
		bx_in			: in  signed (15 downto 0);
		wh_in			: in  signed (15 downto 0);
		bh_in			: in  signed (15 downto 0);
		lutad			: out signed (14 downto 0);
		rdout			: out std_logic;
		lutre			: in  unsigned (14 downto 0);
		output		: out signed (15 downto 0);
		done			: out std_logic
	);
end component;

component lut is
	port
	(
		address	: in  std_logic_vector (14 downto 0);
		clken		: in  std_logic := '1';
		clock		: in  std_logic := '1';
		data		: in  std_logic_vector (14 downto 0);
		rden		: in  std_logic := '1';
		wren		: in  std_logic			;
		q			: out std_logic_vector (14 downto 0)
	);
end component;

signal clock,reset,start,lut_rd,done: std_logic := '0';
signal lut_re,output: signed (15 downto 0) := (others => '0');
signal lut_ad,address: unsigned (14 downto 0) := (others => '0');

begin

	clock <= not clock after 10 ns;
	
	u0: LSTM_gate
		port map (
			clock		=> clock,
			reset		=> reset,
			start		=> start,
			input		=> "0001011101010011",
			ht_in		=> "0000110111101100",
			wx_in		=> "0000000101100101",
			bx_in 	=> "0000110100000100",
			wh_in 	=> "1000100110100001",
			bh_in		=> "0000001001001101",
			lutad		=> lut_ad,
			rdout		=> lut_rd,
			lutre		=> lut_re,
			output	=> output,
			done		=> done
		);
		
	address <= std_logic_vector(lut_ad);
		
	u1: lut
		port map (
			address	=> address,
			clock		=> clock,
			clken		=> '1',
			rden		=> lut_rd,
			wren		=> '0',
			data		=> (others => '0'),
			q			=> q
		);
		
	lut_re <= unsigned(q);

end rtl;
			